name: Version Bump and Release

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual trigger

jobs:
  version-bump-and-release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write # Required for pushing changes and creating releases
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for proper versioning
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run Build
        run: npm run build
      
      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"
      
      - name: Bump minor version
        id: bump_version
        run: |
          # Split version into parts
          IFS='.' read -ra VERSION_PARTS <<< "${{ steps.current_version.outputs.current }}"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Increment minor version and reset patch to 0
          NEW_MINOR=$((MINOR + 1))
          NEW_VERSION="${MAJOR}.${NEW_MINOR}.0"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"
          
          # Update package.json
          npm version $NEW_VERSION --no-git-tag-version
      
      - name: Update package-lock.json
        run: npm install --package-lock-only
      
      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ steps.bump_version.outputs.new_version }} [skip ci]"
          git tag "v${{ steps.bump_version.outputs.new_version }}"
      
      - name: Push changes
        run: |
          git push origin main
          git push origin "v${{ steps.bump_version.outputs.new_version }}"
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.bump_version.outputs.new_version }}
          release_name: Release v${{ steps.bump_version.outputs.new_version }}
          body: |
            ## Changes in v${{ steps.bump_version.outputs.new_version }}
            
            This release was automatically generated with version bump from the latest changes merged to main.
            AWS Amplify will automatically deploy this version.
            
            ### Release Information
            - **Branch**: main
            - **Commit**: ${{ github.sha }}
            - **Release Date**: ${{ github.run_id }}
          draft: false
          prerelease: false
      
      # Note: Deployment is handled automatically by AWS Amplify
      # AWS Amplify monitors the main branch and deploys when changes are detected
      # No additional deployment steps needed in this workflow

      - name: Version Bump Summary
        run: |
          echo "## Version Bump Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: v${{ steps.bump_version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous Version**: v${{ steps.current_version.outputs.current }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: âœ… Success" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment**: AWS Amplify will automatically deploy after detecting the version bump commit" >> $GITHUB_STEP_SUMMARY
